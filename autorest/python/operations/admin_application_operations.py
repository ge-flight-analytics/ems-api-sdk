# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError

from .. import models


class AdminApplicationOperations(object):
    """AdminApplicationOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def reconnect_ems_systems(
            self, custom_headers=None, raw=False, **operation_config):
        """Discards connection information to all EMS systems known to the user.
        This will force the server to reload all configuration
        and other information from the server during the next connection.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AdiEmsWebApiModelError or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AdiEmsWebApiModelError or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.reconnect_ems_systems.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [204, 401, 503]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 401:
            deserialized = self._deserialize('AdiEmsWebApiModelError', response)
        if response.status_code == 503:
            deserialized = self._deserialize('AdiEmsWebApiModelError', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    reconnect_ems_systems.metadata = {'url': '/v2/admin/application/reconnect-ems-systems'}

    def reconnect_ems_system(
            self, ems_system_id, custom_headers=None, raw=False, **operation_config):
        """Discards connection information to the backing EMS system. This will
        force the server to reload all configuration
        and other information from the server during the next connection.

        Typically this is called when there have been modifications to user or
        group membership in groups in Active Dirctory.
        In desktop applications, when someone has their group membership
        changed, that user can lock and unlock the machine,
        which recreates the user token representing the rights for that user.
        In the case of a web server, there is no way to
        manually refresh the cached user rights short of stopping and starting
        the application pool.
        Instead, call this method to force the web server to refresh access
        rights based on group membership changes.

        :param ems_system_id:
        :type ems_system_id: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AdiEmsWebApiModelError or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AdiEmsWebApiModelError or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.reconnect_ems_system.metadata['url']
        path_format_arguments = {
            'emsSystemId': self._serialize.url("ems_system_id", ems_system_id, 'int')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [204, 401, 503]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 401:
            deserialized = self._deserialize('AdiEmsWebApiModelError', response)
        if response.status_code == 503:
            deserialized = self._deserialize('AdiEmsWebApiModelError', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    reconnect_ems_system.metadata = {'url': '/v2/admin/application/reconnect-ems-systems/{emsSystemId}'}

    def refresh_security(
            self, ems_system_id, custom_headers=None, raw=False, **operation_config):
        """Informs the website that security has been modified on an EMS system
        and requests a refresh from Active Directory.

        Typically this is called when there have
        been modifications to user or group membership in groups in Active
        Dirctory. In desktop applications, when someone
        has their group membership changed, that user can lock and unlock the
        machine, which recreates the user token
        representing the rights for that user. In the case of a web server,
        there is no way to manually refresh the cached
        user rights short of stopping and starting the application pool.
        Instead, call this method to force the web server to refresh access
        rights based on group membership changes.

        :param ems_system_id:
        :type ems_system_id: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AdiEmsWebApiModelError or ClientRawResponse if raw=true
        :rtype: ~swagger.models.AdiEmsWebApiModelError or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.refresh_security.metadata['url']
        path_format_arguments = {
            'emsSystemId': self._serialize.url("ems_system_id", ems_system_id, 'int')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [204, 401, 503]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 401:
            deserialized = self._deserialize('AdiEmsWebApiModelError', response)
        if response.status_code == 503:
            deserialized = self._deserialize('AdiEmsWebApiModelError', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    refresh_security.metadata = {'url': '/v2/admin/application/refresh-security/{emsSystemId}'}
